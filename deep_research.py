# -*- coding: utf-8 -*-
"""Deep Research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ikeV7nP9nLCgBjAjNnI4diKzn79dvGDM
"""



"""**SETUP**"""

from openai import OpenAI
import os, json, itertools
from IPython.display import display, Markdown, Latex

from google.colab import userdata
openai_api_key = userdata.get('ai_agents_openai')

# Set up OpenAI API Key in the os
os.environ['OPENAI_API_KEY'] = openai_api_key

client = OpenAI()

"""# Define the inputs"""

MODEL = "gpt-4.1"
MODEL_MINI = "gpt-4.1-mini"
TOOLS = [{ "type": "web_search" }]
developer_message="""
You are an expert Deep Researcher.
You provide complete and in depth research to the user.
"""

#Request the topic of research
topic = input("Please enter the research topic: \n")
topic

# Define here the prompt to clarify
prompt_to_clarify = f"""
Ask 5 numbered clarifying question to the user about the topic: {topic}.
The goal of the questions is to understand the intended purpose of the research.
Reply only with the questions.
"""

"""**LLM asks questions**"""

clarify = client.responses.create(
    model= MODEL_MINI,
    input= prompt_to_clarify,
    instructions= developer_message
)

questions = clarify.output[0].content[0].text.split( "\n")
questions

#Ask each question to the user.
answers = []
for question in questions:
  answer = input(question+"\n")
  answers.append(answer)

# Write the prompt_goals prompt
prompt_goals = f"""
Using the user answers {answers} to questions {questions}, write a goal sentence and 5 web search queries for the research about {topic}
Output: A json list of 5 web search queries and a goal sentence that wil reach it
Format: {{\"goal\":\"...\", \"queries\":[\"q1\",.....]}}
"""

# Goal and Queries
goal_and_queries = client.responses.create(
    model= MODEL,
    input = prompt_goals,
    previous_response_id=clarify.id,
    instructions= developer_message
)

import json
print(json.dumps(json.loads(goal_and_queries.output[0].content[0].text), indent=4))

plan = json.loads(goal_and_queries.output[0].content[0].text)

goal = plan["goal"]
queries = plan["queries"]

print(goal)
print(queries[0])

"""**Web Searches**"""

# Web search with the responses endpoint
web_search = client.responses.create(
    model=MODEL,
    input= f"seach: {queries[0]}",
    instructions= developer_message,
    tools = TOOLS
)

web_search.output[1].id

web_search.output[1].content[0].text

# Build the function for the web searches
def run_search(q):
  web_search = client.responses.create(
    model=MODEL,
    input= f"seach: {q}",
    instructions= developer_message,
    tools = TOOLS
  )
  return {"query": q,
          "resp_id": web_search.output[1].id,
          "research_output": web_search.output[1].content[0].text}

run_search(queries[0])

"""**Verifying if we have enough information to reach goal**"""

# create a function that evaluates the outcome
def evaluate(collected):
  review = client.responses.create(
      model = MODEL,
      input = [
          {"role": "developer", "content": f"Reasearch goal: {goal}"},
          {"role": "assistant", "content": json.dumps(collected)},
          {"role": "user", "content": "Does this information will fully satisfy the goal? Answer Yes or No only!"}
      ],
      instructions= developer_message
  )
  return "yes" in review.output[0].content[0].text.lower()

collected = []
for _ in itertools.count():
  for q in queries:
    print(f"Collecting data for query: {q}")
    collected.append(run_search(q))
  if evaluate(collected):
    break

  #If no: perform 5 more questions
  more_searches = client.responses.create(
      model = MODEL,
      input = [
          {"role": "assistant", "content": f"Current data: {json.dump(collected)}"},
          {"role": "developer", "content": f"Reasearch goal: {goal}. write 5 other web searchs to achieve the goal"},
      ],
      instructions= developer_message,
      previous_response_id=goal_and_queries.id
  )

  queries = json.loads(more_searches.output[0].content[0].text)

print(collected)

"""**Write the final report**"""

# Use the responses endpoint to write the deep research report
report = client.responses.create(
    model=MODEL,
    input = [
        {"role": "developer", "content": (f"Write a complete and detailed report about reasearch goal: {goal}"
        "Cite sources inline using  [n] and append a reference"
        "list mapping [n] to url")},
        {"role": "assistant", "content": json.dumps(collected)},
    ],
    instructions= developer_message
)

print("\n=== FINAL REPORT ===")
display(Markdown(report.output[0].content[0].text))